from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import requests
from bs4 import BeautifulSoup
import openai

# –£—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ–π OpenAI API –∫–ª—é—á
client = openai.OpenAI(api_key="–í–ê–®_OPENAI_API_KEY")

app = FastAPI()

class URLRequest(BaseModel):
    url: str

def fetch_homepage(url):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers, timeout=10)
    response.raise_for_status()
    return response.text

def clean_text(html):
    """–£–¥–∞–ª—è–µ—Ç HTML-–∫–æ–¥, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"""
    soup = BeautifulSoup(html, "html.parser")

    for tag in soup(["script", "style", "meta", "link"]):
        tag.decompose()

    text = soup.get_text(separator="\n")
    lines = [line.strip() for line in text.splitlines() if line.strip()]
    
    return " ".join(lines[:2000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

def generate_system_prompt(company_info):
    """–°–æ–∑–¥–∞—ë—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    return f"""
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å —Å–∞–π—Ç–∞!
–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—ã –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—à—å/–∞–¥–∞–ø—Ç–∏—Ä—É–µ—à—å —Å–∫—Ä–∏–ø—Ç –ø–æ–¥ –±–∏–∑–Ω–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏). 
–î–∞–ª–µ–µ, —É–∂–µ –∫–∞–∫ ¬´–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç {company_info.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬ª, –±—É–¥–µ—à—å –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–í–∞–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ **–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞**:

1. **–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π** –Ω–æ–≤—ã—Ö —Ü–µ–Ω, —É—Å–ª—É–≥ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.  
2. –í—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ —Ü–µ–Ω—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–º—É, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–æ –Ω–∏–∂–µ ‚Äî –µ—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏—Ö –Ω–µ—Ç, —Å–æ–æ–±—â–∞–π, —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å.  
3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —á—ë–º-—Ç–æ, —á—Ç–æ –Ω–µ –æ—Ç—Ä–∞–∂–µ–Ω–æ –≤ —Ç–≤–æ—ë–º –æ–ø–∏—Å–∞–Ω–∏–∏, –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —É—Ç–æ—á–Ω–∏—à—å –¥–µ—Ç–∞–ª–∏ –∏ –≤–µ—Ä–Ω—ë—à—å—Å—è –ø–æ–∑–∂–µ.  
4. **–¢–æ–Ω** –æ–±—â–µ–Ω–∏—è ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π, —Å –∏–Ω—Ç–æ–Ω–∞—Ü–∏–µ–π ¬´–∂–∏–≤–æ–≥–æ¬ª –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ò–Ω–æ–≥–¥–∞ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ª—ë–≥–∫–∏–µ –æ–ø–µ—á–∞—Ç–∫–∏.  
5. –ì–æ–≤–æ—Ä–∏ ¬´–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫¬ª, –Ω–æ —Å—Ç–∞—Ä–∞–π—Å—è –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º, –Ω–µ –∑–∞–±—ã–≤–∞—è –ø—Ä–æ ¬´—Å–∫—Ä–∏–ø—Ç¬ª.  

### –û –∫–æ–º–ø–∞–Ω–∏–∏:
- **–ù–∞–∑–≤–∞–Ω–∏–µ:** {company_info.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
- **–û–ø–∏—Å–∞–Ω–∏–µ:** {company_info.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
- **–ö–æ–Ω—Ç–∞–∫—Ç—ã:** {company_info.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} | {company_info.get('Email', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
- **–ê–¥—Ä–µ—Å:** {company_info.get('–ê–¥—Ä–µ—Å', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
- **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:** {company_info.get('–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
- **–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏:** {company_info.get('–£—Å–ª—É–≥–∏/–¢–æ–≤–∞—Ä—ã', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
"""

def extract_info_with_gpt(site_url, clean_text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–π—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç"""
    prompt = f"""
–¢—ã ‚Äî AI, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–π—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π.
–í–æ—Ç —Ç–µ–∫—Å—Ç —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã {site_url}:

\"\"\"{clean_text}\"\"\"

–ò–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
–ù–∞–∑–≤–∞–Ω–∏–µ: ...
–û–ø–∏—Å–∞–Ω–∏–µ: ...
–¢–µ–ª–µ—Ñ–æ–Ω: ...
Email: ...
–ê–¥—Ä–µ—Å: ...
–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: ...
–£—Å–ª—É–≥–∏/–¢–æ–≤–∞—Ä—ã: ...

–í–µ—Ä–Ω–∏ –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ.
"""

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "system", "content": prompt}],
        temperature=0.0,
    )

    company_info = eval(response.choices[0].message.content)
    return generate_system_prompt(company_info)

@app.post("/process")
async def process_url(request: URLRequest):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–π—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç"""
    try:
        print(f"üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–π—Ç: {request.url}")

        html = fetch_homepage(request.url)
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        text = clean_text(html)
        print("‚úÖ –¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")

        system_prompt = extract_info_with_gpt(request.url, text)
        print("‚úÖ GPT-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")

        return {"system_prompt": system_prompt}
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {request.url}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/analyze")
async def analyze_url(url: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–π—Ç —á–µ—Ä–µ–∑ GET-–∑–∞–ø—Ä–æ—Å"""
    try:
        print(f"üîπ GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑: {url}")

        html = fetch_homepage(url)
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        text = clean_text(html)
        print("‚úÖ –¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")

        system_prompt = extract_info_with_gpt(url, text)
        print("‚úÖ GPT-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")

        return {"system_prompt": system_prompt}
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
